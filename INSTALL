

STEPS TO INSTALL THE POLCONVERT PACKAGE:

####################################################################
###### CASE 1: PACKAGE FOR CASA USE (I.E., PHASED ALMA):

0.  Install required linux packages if not already present
    (cfitsio is in the EPEL repo):

    yum install python-devel
    yum install cfitsio cfitsio-devel
    yum install java

1.- Compile the C++ module. Just run:

    python setup.py build_ext --inplace
    
    After this step, the file "_PolConvert.so" should have 
    been created.  You may need to manually edit setup.py
    to provide include locations for, e.g. fitsio.h and
    possibly a link directive for libcfitsio.

2.- Copy all the files of this directory into a destination directory. 
    The name of the destination directory could be, e.g.

         /YourHomeDir/.casa/Nordic_Tools

3.- Go to that directory and execute the "buildmytasks" command.

4.- Edit the file "YourHomeDirectory/.casa/init.py" and add the line
    (create it if it doesn not already exist):

    execfile("YourHomeDirectory/.casa/Nordic_Tools/mytasks.py")

5.- The task should now be available. Just start CASA and write:

               tget polconvert

    to load the task.
 
6.- To restore to the distributed state:

    rm -rf build _PolConvert.so *.pyc
    rm -rf polconvert.py polconvert_cli.py mytasks.py

Any feedback and bug report should be sent either to the ARC 
Nordic Node (contact@nordic-alma.se) or to the source maintainer
(ivan.marti-vidal@chalmers.se).


P.S: The QA2 directory contains scripts for the proper calibration
of the ALMA measurement sets. Specifically, the script 
"scriptForCalibrationAPP.py" shall be run for generating the 
calibration tables to apply PolConvert.





###############################################################
###### CASE 2: STANDALONE PYTHON INTERFACE.

0.- Download PolConvert from GitHub:

    git repo clone marti-vidal-i/PolConvert


1.- Install the non-standard packages needed for compilation. 
    These are:

    - CFITSIO-DEVEL
    - FFTW3-DEVEL
    - PYTHON-DEVEL

    For instance (yum), run the commands:

    yum install python-devel
    yum install cfitsio cfitsio-devel
    yum install fftw-devel fftw-doc


2.- Install miniconda:

  2.a- Download the shell installer from
      https://docs.conda.io/en/latest/miniconda.html#linux-installers
    and follow the instructions.

  2.b- Add the conda-forge channel. Just run the command:

       conda config --add channels conda-forge



3.- Create a conda environment for polconvert:

    conda create --name PCONV python=3.9 scipy=1.6.3 numpy=1.20.2 matplotlib=3.4.1




4.- Copy the "PolConvert" directory into your favorite program path.
    E.g.:

    cp -r PolConvert $HOME/MyPrograms/.

    (let us suppose that PolConvert is stored in $HOME/MyPrograms)




5.- Add the following lines to your bash profile (or equivalent TC shell):

    export PYTHONPATH=$HOME/MyPrograms
    export PYTHONPATH=${PYTHONPATH}:${PYTHONPATH}/PolConvert/EU-VGOS

    (these lines should come BEFORE any other line involving PYTHONPATH
     in your ".bashrc" profile).

    Don't forget to run these bash lines before you move to next step.






6.- Compile the program:
 
   6.1- Take a look at the "setup.py" script in the PolConvert directory.
        You may need to change the "cfitsio" path defined there.

   6.2- Load the conda environment and compile:

        conda activate PCONV
        python3 setup.py build_ext --inplace





7.- Copy the "master_*python3.py" script, located in 
    PolConvert/EU-VGOS, into a directory where you want to
    produce the polconverted data of a given session. 
    Read the instructions in the script header and good luck.


